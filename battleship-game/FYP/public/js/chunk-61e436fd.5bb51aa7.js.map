{"version":3,"sources":["webpack:///./src/views/Play.vue?e3f7","webpack:///./src/components/Sideboard.vue?2238","webpack:///src/components/Sideboard.vue","webpack:///./src/components/Sideboard.vue?511c","webpack:///./src/components/Sideboard.vue?57ae","webpack:///./src/components/Board.vue?395c","webpack:///src/components/Board.vue","webpack:///./src/components/Board.vue?9fba","webpack:///./src/components/Board.vue?b4a3","webpack:///src/views/Play.vue","webpack:///./src/views/Play.vue?ba38","webpack:///./src/views/Play.vue","webpack:///./src/components/Sideboard.vue?d08b","webpack:///./src/components/Board.vue?d5d4"],"names":["render","_vm","this","_h","$createElement","_c","_self","_v","staticRenderFns","staticClass","directives","name","rawName","value","ongoing","expression","attrs","allShipsPlaced","on","startGame","noGameFound","loadGame","rotateShips","undefined","player","ref","winner","_e","data","mounted","methods","setTimeout","emit","created","beforeDestroy","component","_l","width","n","key","refInFor","generate","startSquare","isAtRightEdge","isAtLeftEdge","squaresToOccupy","checkIfAdjacentTaken","dragStart","dragOver","event","drop","orientation","i","updateAndSave","localStorage","savedGame","j","userIterator","computerIterator","document","playGame","revealSquare","targetClass","updateScore","computeAdjacentSquares","wrongDeducedOrientation","hunt","possibleSquares","computerTurn","target","placeholder","console","length","computerMemory","previousTurnHit","previousShipSunk","previousShipHit","deducedOrientation","previousIndexesHit","checkerboardIndex","gameData","username","outcome","moveCount","userBoard","computerBoard","squaresContainingShips","destroyer","submarine","cruiser","battleship","carrier","squaresContainingEnemyShips","userShipsSunk","computerShipsSunk","destroyerCount","submarineCount","cruiserCount","battleshipCount","carrierCount","cpuDestroyerCount","cpuSubmarineCount","cpuCruiserCount","cpuBattleshipCount","cpuCarrierCount","playerScore","cpuScore","destroyerOrientation","submarineOrientation","cruiserOrientation","battleshipOrientation","carrierOrientation","draggedShip","selectedShipIndex","selectedShipClass","currentPlayer","shipPlaced","isGameStarted","computed","components","Header","Board","Sideboard"],"mappings":"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AAZA,8BAGUQ,EAAVA,YACA,+CACY,KAAZ,mCAGQ,KAAR,gBACQ,KAAR,qBACQ,KAAR,cAUEjC,UAEE,KAAJ,0EACI,KAAJ,wEACI,KAAJ,gEACI,KAAJ,sEACI,KAAJ,8BAEM,IAAN,oCACQ,KAAR,4BAEM,KAAN,2EACM,KAAN,6EACM,KAAN,mEACM,KAAN,yEACM,KAAN,iBACM,KAAN,aAEI,KAAJ,6BACM,KAAN,2EACM,KAAN,6EACM,KAAN,mEACM,KAAN,yEACM,KAAN,cAQEI,UACE,KAAJ,SACA,gBACA,CACMtB,KAANA,YACM6D,OAANA,EACMrB,YAANA,CACA,MACA,iBAGA,CACMxC,KAANA,YACM6D,OAANA,EACMrB,YAANA,CACA,QACA,8BAGA,CACMxC,KAANA,UACM6D,OAANA,EACMrB,YAANA,CACA,QACA,8BAGA,CACMxC,KAANA,aACM6D,OAANA,EACMrB,YAANA,CACA,UACA,2CAGA,CACMxC,KAANA,UACM6D,OAANA,EACMrB,YAANA,CACA,YACA,yDAKI,KAAJ,aACA,iCACM,KAAN,0CACM,KAAN,wCACM,KAAN,gCACA,yEACA,sCACU,KAAV,iCAEA,sCACU,KAAV,iCAEA,oCACU,KAAV,+BAEA,uCACU,KAAV,kCAEA,oCACU,KAAV,iCAGA,sCACU,KAAV,mCAEA,sCACU,KAAV,mCAEA,oCACU,KAAV,iCAEA,uCACU,KAAV,oCAEA,oCACU,KAAV,qCAKEjB,gBACE,KAAJ,2BAEEN,OACE,MAAJ,CACM6C,eAANA,CACQC,iBAARA,EACQC,kBAARA,EACQC,gBAARA,GACQC,mBAARA,GACQC,mBAARA,GACQX,gBAARA,IAEMY,kBAANA,WACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBACMP,OAANA,EACMQ,SAANA,CACQC,SAARA,GACQC,QAARA,GACQC,UAARA,EACQC,UAARA,GACQC,cAARA,GACQC,uBAARA,CAAUC,UAAVA,GAAUC,UAAVA,GAAUC,QAAVA,GAAUC,WAAVA,GAAUC,QAAVA,IACQC,4BAARA,CAAUL,UAAVA,GAAUC,UAAVA,GAAUC,QAAVA,GAAUC,WAAVA,GAAUC,QAAVA,IACQE,cAARA,GACQC,kBAARA,GACQC,eAARA,EACQC,eAARA,EACQC,aAARA,EACQC,gBAARA,EACQC,aAARA,EACQC,kBAARA,EACQC,kBAARA,EACQC,gBAARA,EACQC,mBAARA,EACQC,gBAARA,EACQC,YAARA,EACQC,SAARA,GAEMC,qBAANA,aACMC,qBAANA,aACMC,mBAANA,aACMC,sBAANA,aACMC,mBAANA,aACMC,iBAANA,EACMC,uBAANA,EACMC,uBAANA,EACMC,cAANA,OAEMC,WAANA,EACMC,eAANA,IAGEC,SAAFA,IACA,wCC/4B+U,ICQ3U,G,UAAY,eACd,EACA,EACA,GACA,EACA,KACA,WACA,OAIa,I,QCLA,GACbC,WAAFA,CACIC,cACAC,QACAC,cClB0U,ICO1U,EAAY,eACd,EACA1H,EACAQ,GACA,EACA,KACA,KACA,MAIa,e,2CClBf,W,kCCAA","file":"js/chunk-61e436fd.5bb51aa7.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('Header'),_c('h1',[_vm._v(\"Single Player Mode\")]),_c('Board'),_c('Sideboard')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"hidden-info\"},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.ongoing===0),expression:\"ongoing===0\"}],staticClass:\"setup\"},[_c('button',{attrs:{\"id\":\"start\",\"disabled\":!_vm.allShipsPlaced,\"title\":!_vm.allShipsPlaced ? 'Place your ships' : 'Start new game'},on:{\"click\":_vm.startGame}},[_vm._v(\"New Game\")]),_c('button',{attrs:{\"id\":\"load\",\"disabled\":_vm.noGameFound,\"title\":_vm.noGameFound ? 'No game found' : 'Load unfinished game'},on:{\"click\":_vm.loadGame}},[_vm._v(\"Load Game\")]),_c('button',{attrs:{\"id\":\"rotate\"},on:{\"click\":_vm.rotateShips}},[_vm._v(\"Rotate ships\")])]),(_vm.player === undefined)?_c('h3',{ref:\"placeships\",attrs:{\"id\":\"info\"}},[_vm._v(\"Place your ships\")]):(_vm.player === 'user')?_c('h3',{attrs:{\"id\":\"info\"}},[_vm._v(\"Your turn\")]):(_vm.player === 'computer')?_c('h3',{attrs:{\"id\":\"info\"}},[_vm._v(\"Computer's turn\")]):(_vm.winner === 'user')?_c('h3',{attrs:{\"id\":\"info\"}},[_vm._v(\"You won!!\")]):(_vm.winner === 'computer')?_c('h3',{attrs:{\"id\":\"info\"}},[_vm._v(\"Computer won!\")]):_vm._e()]),_c('div',{staticClass:\"container\"},[_c('div',{ref:\"display\",staticClass:\"grid-display\"},[_c('div',{ref:\"destroyer\",staticClass:\"ship destroyer\",attrs:{\"draggable\":\"true\"}},[_c('div',{staticClass:\"start\",attrs:{\"id\":\"destroyer-0\"}}),_c('div',{staticClass:\"end\",attrs:{\"id\":\"destroyer-1\"}})]),_c('div',{ref:\"submarine\",staticClass:\"ship submarine\",attrs:{\"draggable\":\"true\"}},[_c('div',{staticClass:\"start\",attrs:{\"id\":\"submarine-0\"}}),_c('div',{attrs:{\"id\":\"submarine-1\"}}),_c('div',{staticClass:\"end\",attrs:{\"id\":\"submarine-2\"}})]),_c('div',{ref:\"cruiser\",staticClass:\"ship cruiser\",attrs:{\"draggable\":\"true\"}},[_c('div',{staticClass:\"start\",attrs:{\"id\":\"cruiser-0\"}}),_c('div',{attrs:{\"id\":\"cruiser-1\"}}),_c('div',{staticClass:\"end\",attrs:{\"id\":\"cruiser-2\"}})]),_c('div',{ref:\"battleship\",staticClass:\"ship battleship\",attrs:{\"draggable\":\"true\"}},[_c('div',{staticClass:\"start\",attrs:{\"id\":\"battleship-0\"}}),_c('div',{attrs:{\"id\":\"battleship-1\"}}),_c('div',{attrs:{\"id\":\"battleship-2\"}}),_c('div',{staticClass:\"end\",attrs:{\"id\":\"battleship-3\"}})]),_c('div',{ref:\"carrier\",staticClass:\"ship carrier\",attrs:{\"draggable\":\"true\"}},[_c('div',{staticClass:\"start\",attrs:{\"id\":\"carrier-0\"}}),_c('div',{attrs:{\"id\":\"carrier-1\"}}),_c('div',{attrs:{\"id\":\"carrier-2\"}}),_c('div',{attrs:{\"id\":\"carrier-3\"}}),_c('div',{staticClass:\"end\",attrs:{\"id\":\"carrier-4\"}})])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <div class=\"hidden-info\">\r\n        <div class=\"setup\" v-show=\"ongoing===0\">\r\n            <button id=\"start\" :disabled='!allShipsPlaced' @click=\"startGame\" :title=\"!allShipsPlaced ? 'Place your ships' : 'Start new game'\">New Game</button>\r\n            <button id=\"load\" :disabled='noGameFound' @click=\"loadGame\" :title=\"noGameFound ? 'No game found' : 'Load unfinished game'\">Load Game</button>\r\n            <button id=\"rotate\" @click=\"rotateShips\">Rotate ships</button>\r\n        </div>\r\n        <h3 id=\"info\" ref=\"placeships\" v-if=\"player === undefined\">Place your ships</h3>\r\n        <h3 id=\"info\" v-else-if=\"player === 'user'\">Your turn</h3>\r\n        <h3 id=\"info\" v-else-if=\"player === 'computer'\">Computer's turn</h3>\r\n        <h3 id=\"info\" v-else-if=\"winner === 'user'\">You won!!</h3>\r\n        <h3 id=\"info\" v-else-if=\"winner === 'computer'\">Computer won!</h3>\r\n    </div>\r\n    <div class=\"container\">\r\n       <div class=\"grid-display\" ref=\"display\">\r\n            <div class=\"ship destroyer\" ref=\"destroyer\" draggable=\"true\">\r\n                <div id=\"destroyer-0\" class=\"start\"></div>\r\n                <div id=\"destroyer-1\" class=\"end\"></div>\r\n            </div>\r\n            <div class=\"ship submarine\" ref=\"submarine\" draggable=\"true\">\r\n                <div id=\"submarine-0\" class=\"start\"></div>\r\n                <div id=\"submarine-1\"></div>\r\n                <div id=\"submarine-2\" class=\"end\"></div>\r\n            </div>\r\n            <div class=\"ship cruiser\" ref=\"cruiser\" draggable=\"true\">\r\n                <div id=\"cruiser-0\" class=\"start\"></div>\r\n                <div id=\"cruiser-1\"></div>\r\n                <div id=\"cruiser-2\" class=\"end\"></div>\r\n            </div>\r\n            <div class=\"ship battleship\" ref=\"battleship\" draggable=\"true\">\r\n                <div id=\"battleship-0\" class=\"start\"></div>\r\n                <div id=\"battleship-1\"></div>\r\n                <div id=\"battleship-2\"></div>\r\n                <div id=\"battleship-3\" class=\"end\"></div>\r\n            </div>\r\n            <div class=\"ship carrier\" ref=\"carrier\" draggable=\"true\">\r\n                <div id=\"carrier-0\" class=\"start\"></div>\r\n                <div id=\"carrier-1\"></div>\r\n                <div id=\"carrier-2\"></div>\r\n                <div id=\"carrier-3\"></div>\r\n                <div id=\"carrier-4\" class=\"end\"></div>\r\n            </div>\r\n        </div>     \r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            player: undefined,\r\n            winner: undefined,\r\n            ongoing: 0,\r\n            allShipsPlaced: false,\r\n            noGameFound: true,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.$root.$on('turnChange', (turn) => {\r\n            this.player = turn\r\n        }),\r\n        this.$root.$on('gameWon', (whoWon) => {\r\n            this.player = \"\"\r\n            this.winner = whoWon\r\n        })\r\n        this.$refs.destroyer.addEventListener('mousedown', this.emit)\r\n        this.$refs.battleship.addEventListener('mousedown', this.emit)\r\n        this.$refs.carrier.addEventListener('mousedown', this.emit)\r\n        this.$refs.cruiser.addEventListener('mousedown', this.emit)\r\n        this.$refs.submarine.addEventListener('mousedown', this.emit)\r\n        if (localStorage.getItem('gameState') !== null) {\r\n            if (JSON.parse(localStorage.getItem('gameState')) !== null) this.noGameFound = false\r\n        }\r\n        \r\n    },\r\n    methods: {\r\n        ...mapActions(['startGame']),\r\n        rotateShips() {\r\n            this.$refs.destroyer.classList.toggle('destroyer-vertical')\r\n            this.$refs.battleship.classList.toggle('battleship-vertical')\r\n            this.$refs.carrier.classList.toggle('carrier-vertical')\r\n            this.$refs.cruiser.classList.toggle('cruiser-vertical')\r\n            this.$refs.submarine.classList.toggle('submarine-vertical')\r\n        },\r\n        startGame() {\r\n            // Check if all ships are placed before starting game\r\n            if (this.allShipsPlaced) {\r\n                this.startGame; // change state\r\n                this.ongoing = 1;\r\n                this.$root.$emit('game-started')\r\n            } else {\r\n                this.$refs.placeships.style.color=\"red\"\r\n                this.$refs.placeships.style.fontWeight = \"800\";\r\n                setTimeout(() => {\r\n                    this.$refs.placeships.style.color=\"\"\r\n                    this.$refs.placeships.style.fontWeight = \"700\"\r\n                }, 1000)\r\n            }\r\n            /* this.$root.$emit('game-started') */\r\n        },\r\n        loadGame() {\r\n            this.ongoing = 1;\r\n            this.$root.$emit('game-loaded')\r\n        },\r\n        emit(e) {\r\n            this.$eventHub.$emit('dragged', e)\r\n        }\r\n    },\r\n    created() {\r\n        // listen to all-ships-placed event form board.vue\r\n        this.$eventHub.$on('all-ships-placed', () => {\r\n            this.allShipsPlaced = true;\r\n        });\r\n    },\r\n    beforeDestroy() {\r\n        this.$eventHub.$off('all-ships-placed');\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n    * {\r\n        box-sizing: border-box;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    #info {\r\n        user-select: none;\r\n    }\r\n    .container {\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    .grid-display {\r\n        display: flex;\r\n    } \r\n    .ship {\r\n        background-color: rgb(180, 180, 180);\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        margin: 1vmin;\r\n        width: calc(4.6vmin * var(--width, 1));\r\n        height: calc(4.6vmin * var(--height, 1));\r\n        border-radius: 2.3vmin;\r\n    }\r\n\r\n    .ship div {\r\n        width: 4.6vmin;\r\n        height: 4.6vmin;\r\n        border: 1px solid rgba(255, 255, 255, 0.315);\r\n    }\r\n\r\n    .destroyer {\r\n        --width: 2;\r\n    }\r\n    .destroyer-vertical {\r\n        --height: 2;\r\n        --width: 1\r\n    }\r\n    .submarine, .cruiser {\r\n        --width: 3;\r\n    }\r\n    .submarine-vertical, .cruiser-vertical {\r\n        --height: 3;\r\n        --width: 1;\r\n    }\r\n    .battleship {\r\n        --width: 4;\r\n    }\r\n    .battleship-vertical {\r\n        --height: 4;\r\n        --width: 1;\r\n    }\r\n    .carrier {\r\n        --width: 5;\r\n    }\r\n    .carrier-vertical {\r\n        --height: 5;\r\n        --width: 1;\r\n    }\r\n    button {\r\n        background: linear-gradient(to bottom, #d8d4cd, #b9b9b9 100%);\r\n        text-transform: uppercase;\r\n        padding: 0.8em 1em;\r\n        border: none;\r\n        cursor: pointer;\r\n        text-align: center;\r\n        -webkit-user-select: none;\r\n        -moz-user-select: none;\r\n        user-select: none;\r\n        white-space: nowrap;\r\n        display: inline-block;\r\n        transition: all 150ms;\r\n        border-radius: 3px;\r\n        font-weight: 600;\r\n        margin: 1.2em 1em;\r\n    }\r\n    button:disabled{\r\n        cursor: default;\r\n    }\r\n\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sideboard.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sideboard.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Sideboard.vue?vue&type=template&id=21011b0f&scoped=true&\"\nimport script from \"./Sideboard.vue?vue&type=script&lang=js&\"\nexport * from \"./Sideboard.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Sideboard.vue?vue&type=style&index=0&id=21011b0f&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"21011b0f\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"grid grid-user\"},_vm._l((this.width*this.width),function(n){return _c('div',{key:n,ref:\"userGrid\",refInFor:true,attrs:{\"id\":'user'+(n-1)}})}),0),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isGameStarted),expression:\"isGameStarted\"}],staticClass:\"grid grid-computer\"},_vm._l((this.width*this.width),function(n){return _c('div',{key:n,ref:\"computerGrid\",refInFor:true,attrs:{\"id\":'computer'+(n-1)}})}),0)])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>  \r\n    <div>\r\n        <div class=\"container\">\r\n            <!-- User board -->\r\n            <div class=\"grid grid-user\">\r\n                <!-- generate width*width squares with id user1, user2, ..., userwidth*width -->\r\n                <div v-for=\"n in this.width*this.width\" :id=\"'user'+(n-1)\" v-bind:key=\"n\" ref=\"userGrid\"></div>\r\n            </div>\r\n            <!-- Computer/User2 board -->\r\n            <div v-show=\"isGameStarted\" class=\"grid grid-computer\">\r\n            <!-- <div class=\"grid grid-computer\"> -->\r\n                <!-- generate width*width squares with id computer1, computer2, ..., computerwidth*width -->\r\n                <div v-for=\"n in this.width*this.width\" :id=\"'computer'+(n-1)\" v-bind:key=\"n\" ref=\"computerGrid\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapActions } from 'vuex';\r\nexport default {\r\n    name: \"Board\",\r\n    methods: {\r\n        ...mapActions(['endGame', 'saveGame']),\r\n        // Generate ships in the computer's board\r\n        generate(ship) {\r\n            var startSquare, isAtRightEdge, isAtLeftEdge\r\n            let orientationDecider = Math.round(Math.random());\r\n            let squaresToOccupy = ship.orientation[orientationDecider]\r\n\r\n            /* Horizontal orientation => Starting square accounts for ship's length horizontally\r\n             * Check that no part of the ship other than start and end occupies the board's edge\r\n             * to avoid ship from 'overflowing' from one row to another\r\n             */\r\n            if (orientationDecider === 0) {\r\n                startSquare = Math.abs(Math.floor(Math.random() * this.$refs.computerGrid.length - ship.length))\r\n                isAtRightEdge = squaresToOccupy.slice(0, ship.length-1).some(index => (startSquare + index) % this.width === this.width - 1)\r\n                isAtLeftEdge = squaresToOccupy.slice(1).some(index => (startSquare + index) % this.width === 0)\r\n\r\n            }\r\n            /* Vertical orientation => Starting square accounts for ship's length vertically\r\n             * i.e. (startSquare, startSquare + widthOfBoard, startSquare + 2*widthOfBoard)\r\n             * Does not need to check if squares are on left or right edge because ships are vertical\r\n             * Does not need to check if it goes beyond the board because that is taken account of in the calculation of startSquare)\r\n             */\r\n            if (orientationDecider === 1) {\r\n                startSquare = Math.abs(Math.floor(Math.random() * this.$refs.computerGrid.length - (ship.length-1)*this.width))\r\n            }\r\n\r\n            /* Check if squares to be occupied are taken by some other ships, or if isAtRightEdge/isAtLeftEdge is true\r\n             * If all of it is false, mark the squares as taken by this new ship\r\n             * Else, call the function again and try to regenerate ship that does not violate any restrictions\r\n             */\r\n            const isTaken = squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index].classList.contains('taken'))\r\n            if (!isTaken && !isAtRightEdge && !isAtLeftEdge) {\r\n                if (!(this.checkIfAdjacentTaken(orientationDecider, ship, squaresToOccupy, startSquare))) {\r\n                    squaresToOccupy.forEach(index => { \r\n                        this.$refs.computerGrid[startSquare + index].classList.add('taken', ship.name)\r\n                        this.gameData.squaresContainingEnemyShips[ship.name].push(startSquare+index)\r\n                    })\r\n                } else this.generate(ship)\r\n            }\r\n            else this.generate(ship)\r\n        },\r\n        checkIfAdjacentTaken(orientation, ship, squaresToOccupy, startSquare) {\r\n            if (orientation === 0) {\r\n                /* Horizontal orientation\r\n                    * if leftmost square of ship is at leftmost of board\r\n                        * if ship is in first row, check right of rightmost & bottom square of all squaresToOccupy\r\n                        * if ship is in last row, check right of rightmost & top square of all squaresToOccupy\r\n                        * else, check right of rightmost, top and bottom\r\n                    * else if rightmost square of ship is at rightmost of board\r\n                        * if ship is in first row, check left of leftmost & bottom square of all squaresToOccupy\r\n                        * if ship is in last row, check left of leftmost & top square of all squaresToOccupy\r\n                        * else check left of leftmost, top and bottom\r\n                    * else\r\n                        * if first row, check leftofleftmost, rightofrightmost, bottom of all\r\n                        * if last row, check leftofleftmost, rightofrightmost, top of all\r\n                        * else check leftofleftmost, rightofrightmost, top and bottom of all \r\n                */\r\n                if (String(squaresToOccupy[0] + startSquare).slice(-1) == '0') {\r\n                    if (squaresToOccupy[0] + startSquare < 10) {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 10].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1]+ startSquare + 1].classList.contains('taken')\r\n                    } else if (squaresToOccupy[0] + startSquare > 89) {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 10].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1]+ startSquare + 1].classList.contains('taken')\r\n                    } else {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 10].classList.contains('taken')) || \r\n                                            squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 10].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1] + startSquare +1].classList.contains('taken')\r\n                    }\r\n                } else if (String(squaresToOccupy[ship.length - 1] + startSquare).slice(-1) == '9') {\r\n                    if (squaresToOccupy[0] + startSquare < 10) {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 10].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-1].classList.contains('taken')\r\n                    } else if (squaresToOccupy[0] + startSquare > 89) {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 10].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-1].classList.contains('taken')\r\n                    } else {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 10].classList.contains('taken')) || \r\n                                            squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 10].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-1].classList.contains('taken')\r\n                    }\r\n                } else {\r\n                    if (squaresToOccupy[0] + startSquare < 10) {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 10].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1] + startSquare +1].classList.contains('taken')  ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-1].classList.contains('taken')\r\n                    } else if (squaresToOccupy[0] + startSquare > 89) {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 10].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1] + startSquare + 1].classList.contains('taken')  ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-1].classList.contains('taken')\r\n                    } else {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 10].classList.contains('taken')) || \r\n                                            squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 10].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1] + startSquare +1].classList.contains('taken')  ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-1].classList.contains('taken')\r\n                    }\r\n                }\r\n            } else {\r\n                /* Vertical orientation\r\n                    * if topmost square of ship is at topmost of board\r\n                        * if ship is in first column, check bottom of bottomost & right squares of all squaresToOccupy\r\n                        * if ship is in last column, check bottom of bottommost & left squares of all squaresToOccupy\r\n                        * else, check bottom of bottomost, left and right of all\r\n                    * else if bottomost square of ship is at bottomost of board\r\n                        * if ship is in first column, check top of topmost & right squares of all squaresToOccupy\r\n                        * if ship is in last column, check top of topmost & left squares of all squaresToOccupy\r\n                        * else check top of topmost, left and right of all\r\n                    * else\r\n                        * if first column, check topoftopmost, bottom of bottomost, right of all\r\n                        * if last column, check topoftopmost, bottom of bottomost, left of all\r\n                        * else check topoftopmost, bottomofbottomost, left and right of all\r\n                */\r\n                if (squaresToOccupy[0] + startSquare < 10) {\r\n                    if (String(squaresToOccupy[0] + startSquare).slice(-1) == '0') {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 1].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1]+startSquare +10].classList.contains('taken')\r\n                    } else if (String(squaresToOccupy[0] + startSquare).slice(-1) == '9') {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 1].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1]+ startSquare +10].classList.contains('taken')\r\n                    } else {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 1].classList.contains('taken')) || \r\n                                            squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 1].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1]+startSquare +10].classList.contains('taken')\r\n                    }\r\n                } else if (squaresToOccupy[ship.length-1] + startSquare > 89) {\r\n                    if (String(squaresToOccupy[0] + startSquare).slice(-1) == '0') {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 1].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-10].classList.contains('taken')\r\n                    } else if (String(squaresToOccupy[0] + startSquare).slice(-1) == '9') {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 1].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-10].classList.contains('taken')\r\n                    } else {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 1].classList.contains('taken')) || \r\n                                            squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 11].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-10].classList.contains('taken')\r\n                    }\r\n                } else {\r\n                    if (String(squaresToOccupy[0] + startSquare).slice(-1) == '0') {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 1].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1]+startSquare +10].classList.contains('taken')  ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-10].classList.contains('taken')\r\n                    } else if (String(squaresToOccupy[0] + startSquare).slice(-1) == '9') {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 1].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1]+startSquare +10].classList.contains('taken')  ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-10].classList.contains('taken')\r\n                    } else {\r\n                        return squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index + 1].classList.contains('taken')) || \r\n                                            squaresToOccupy.some(index => this.$refs.computerGrid[startSquare + index - 1].classList.contains('taken')) ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[ship.length-1]+startSquare +10].classList.contains('taken')  ||\r\n                                            this.$refs.computerGrid[squaresToOccupy[0] + startSquare-10].classList.contains('taken')\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        dragStart(event) { \r\n            if (event.target.classList.contains('destroyer')) {\r\n                this.selectedShipIndex = this.gameData.squaresContainingShips['destroyer'].indexOf(parseInt(event.target.id.slice(4)))\r\n                this.selectedShipClass = \"destroyer\"\r\n                this.gameData.squaresContainingShips['destroyer'].forEach(square => {\r\n                    this.$refs.userGrid[square].classList.remove('taken', 'destroyer')\r\n                })\r\n            }\r\n            if (event.target.classList.contains('submarine')) {\r\n                this.selectedShipIndex = this.gameData.squaresContainingShips['submarine'].indexOf(parseInt(event.target.id.slice(4)))\r\n                this.selectedShipClass = \"submarine\"\r\n                this.gameData.squaresContainingShips['submarine'].forEach(square => {\r\n                    this.$refs.userGrid[square].classList.remove('taken', 'submarine')\r\n                })\r\n            }\r\n            if (event.target.classList.contains('cruiser')) {\r\n                this.selectedShipIndex = this.gameData.squaresContainingShips['cruiser'].indexOf(parseInt(event.target.id.slice(4)))\r\n                this.selectedShipClass = \"cruiser\"\r\n                this.gameData.squaresContainingShips['cruiser'].forEach(square => {\r\n                    this.$refs.userGrid[square].classList.remove('taken', 'cruiser')\r\n                })\r\n            }\r\n            if (event.target.classList.contains('battleship')) {\r\n                this.selectedShipIndex = this.gameData.squaresContainingShips['battleship'].indexOf(parseInt(event.target.id.slice(4)))\r\n                this.selectedShipClass = \"battleship\"\r\n                this.gameData.squaresContainingShips['battleship'].forEach(square => {\r\n                    this.$refs.userGrid[square].classList.remove('taken', 'battleship')\r\n                })\r\n            }\r\n            if (event.target.classList.contains('carrier')) {\r\n                this.selectedShipIndex = this.gameData.squaresContainingShips['carrier'].indexOf(parseInt(event.target.id.slice(4)))\r\n                this.selectedShipClass = \"carrier\"\r\n                this.gameData.squaresContainingShips['carrier'].forEach(square => {\r\n                    this.$refs.userGrid[square].classList.remove('taken', 'carrier')\r\n                })\r\n            }\r\n        },\r\n        dragOver(event) {\r\n            event.preventDefault()\r\n        },\r\n        drop(event) {\r\n            event.preventDefault()\r\n            let dropOn = event.target.id.slice(4) // Square that the mouse drops on\r\n            let index = parseInt(this.selectedShipIndex) // Index of ship's body selected\r\n            let shipClass = this.selectedShipClass // Class of ship\r\n            var orientation\r\n            if (shipClass == 'destroyer') {\r\n                orientation = this.destroyerOrientation\r\n                this.length = 2\r\n            }\r\n            if (shipClass == 'submarine') {\r\n                orientation = this.submarineOrientation\r\n                this.length = 3\r\n            }\r\n            if (shipClass == 'cruiser') {\r\n                orientation = this.cruiserOrientation\r\n                this.length = 3\r\n            }\r\n            if (shipClass == 'battleship') {\r\n                orientation = this.battleshipOrientation\r\n                this.length = 4\r\n            }\r\n            if (shipClass == 'carrier') {\r\n                orientation = this.carrierOrientation \r\n                this.length = 5\r\n            }\r\n            if (orientation == 'horizontal') {\r\n                // Calculate length of ship on left and right of selected ship square\r\n                let squaresOnRight = this.length - (index+1)\r\n                let squaresOnLeft = this.length - (squaresOnRight+1)\r\n                // Compute the squares that the ship will occupy\r\n                let squaresToOccupy = []\r\n                for (let i=0; i<this.length; i++) {\r\n                    squaresToOccupy.push(dropOn-squaresOnLeft + i)\r\n                }\r\n                \r\n                const withinBounds = squaresToOccupy.every(index => index < this.width*this.width && index >= 0)\r\n                if (withinBounds) {\r\n                    // Check if squares are taken, whether ship will overflow to previous or next row\r\n                    const isTaken = squaresToOccupy.some(index => this.$refs.userGrid[index].classList.contains('taken'))\r\n                    const overflowLeft = squaresToOccupy.slice(1).some(index => String(index).slice(-1) == \"0\")\r\n                    const overflowRight = parseInt(dropOn.slice(-1)) + squaresOnRight > 9\r\n                    // If no abnormal behaviour, place ship\r\n                    if (!overflowLeft && !overflowRight && !isTaken) {\r\n                        // Remove ship from side board if it is dragged from side board\r\n                        let sideBoard = document.querySelector('.grid-display')\r\n                        let shipClassQuery = \".\" + shipClass\r\n                        if(sideBoard.querySelector(shipClassQuery)) sideBoard.removeChild(this.draggedShip)\r\n                        // Else, move ship from old position to new position\r\n                        else {\r\n                            this.gameData.squaresContainingShips[shipClass].splice(0, this.length)\r\n                        }\r\n                        let i=0;\r\n                        squaresToOccupy.forEach(square => {\r\n                            this.$refs.userGrid[square].classList.add('taken', shipClass)\r\n                            this.gameData.squaresContainingShips[shipClass].push(square)\r\n                            if (i == 0) this.$refs.userGrid[square].classList.add('horizontal-start') \r\n                            if (i == this.length-1) this.$refs.userGrid[square].classList.add('horizontal-end')\r\n                            i++ \r\n                        })\r\n                        // Update number of ships placed to check if all ships are placed before game is started\r\n                        this.shipPlaced += 1;\r\n                        if (this.shipPlaced === 5) this.$eventHub.$emit('all-ships-placed')\r\n                    }\r\n                }\r\n                \r\n            } else {\r\n                // Calculate length of ship on top and bottom of selected ship square\r\n                let squaresOnBottom = this.length - (index+1)\r\n                let squaresOnTop = this.length - (squaresOnBottom+1)\r\n                \r\n                // Compute the squares that the ship will occupy\r\n                let squaresToOccupy = []\r\n                for (let i=0; i<this.length; i++) {\r\n                    squaresToOccupy.push(dropOn-squaresOnTop*this.width +i*this.width)\r\n                }\r\n                /* If squares to occupy are within bounds of board\r\n                 * Check if any of them are taken by other ships\r\n                 * If none is taken, place ship on board, and delete ship from sideboard\r\n                 */\r\n                const withinBounds = squaresToOccupy.every(index => index < this.width*this.width && index >= 0)\r\n                if (withinBounds) {\r\n                    // Does not need to check overflow top or bottom, because inbounds => does not overflow\r\n                    const isTaken = squaresToOccupy.some(index => this.$refs.userGrid[index].classList.contains('taken'))\r\n                    if (!isTaken) {\r\n                        // Remove ship from side board if it is dragged from side board\r\n                        let sideBoard = document.querySelector('.grid-display')\r\n                        let shipClassQuery = \".\" + shipClass\r\n                        if(sideBoard.querySelector(shipClassQuery)) sideBoard.removeChild(this.draggedShip)\r\n                        // Else, move ship from old position to new position\r\n                        else {\r\n                            this.gameData.squaresContainingShips[shipClass].splice(0, this.length)\r\n                        }\r\n                        let i=0;\r\n                        squaresToOccupy.forEach(square => {\r\n                            this.$refs.userGrid[square].classList.add('taken', shipClass)\r\n                            this.gameData.squaresContainingShips[shipClass].push(square)\r\n                            if (i == 0) this.$refs.userGrid[square].classList.add('vertical-start') \r\n                            if (i == this.length-1) this.$refs.userGrid[square].classList.add('vertical-end') \r\n                            i++\r\n                        })\r\n                        // Update number of ships placed to check if all ships are placed before game is started\r\n                        this.shipPlaced += 1;\r\n                        if (this.shipPlaced === 5) this.$eventHub.$emit('all-ships-placed')\r\n                    }   \r\n                }\r\n            \r\n            }\r\n        },\r\n        updateAndSave() {\r\n            this.gameData.computerBoard = []\r\n            this.gameData.userBoard = []\r\n            this.$refs.userGrid.forEach(square => this.gameData.userBoard.push(square.classList))\r\n            this.$refs.computerGrid.forEach(square => this.gameData.computerBoard.push(square.classList))\r\n            localStorage.setItem('gameState', JSON.stringify(this.gameData))\r\n        },\r\n        loadGame() {\r\n            let savedGame = JSON.parse(localStorage.getItem('gameState'))\r\n            var userIterator = 0\r\n            var computerIterator = 0\r\n            this.gameData = savedGame\r\n/*             this.gameData.moveCount = savedGame.moveCount\r\n            this.gameData.playerScore = savedGame.playerScore\r\n            this.gameData.cpuScore = savedGame.cpuScore\r\n            this.gameData.destroyerCount = savedGame.destroyerCount\r\n            this.gameData.submarineCount = savedGame.submarineCount\r\n            this.gameData.cruiserCount = savedGame.cruiserCount\r\n            this.gameData.battleshipCount = savedGame.battleshipCount\r\n            this.gameData.carrierCount = savedGame.carrierCount\r\n            this.gameData.cpuDestroyerCount = savedGame.cpuDestroyerCount\r\n            this.gameData.cpuSubmarineCount = savedGame.cpuSubmarineCount\r\n            this.gameData.cpuCruiserCount = savedGame.cpuCruiserCount\r\n            this.gameData.cpuBattleshipCount = savedGame.cpuBattleshipCount\r\n            this.gameData.cpuCarrierCount = savedGame.cpuCarrierCount\r\n            this.gameData.squaresContainingShips = savedGame.squaresContainingShips\r\n            this.gameData.squaresContainingEnemyShips = savedGame.squaresContainingEnemyShips */\r\n            \r\n            // CLear the board if user places ship but do not start new game\r\n            for (let i=0; i<100; i++) {\r\n                while (this.$refs.userGrid[i].classList.length !=0) this.$refs.userGrid[i].classList.remove(this.$refs.userGrid[i].classList.item(0))\r\n                while (this.$refs.computerGrid[i].classList.length !=0) this.$refs.computerGrid[i].classList.remove(this.$refs.computerGrid[i].classList.item(0))\r\n            }            \r\n\r\n            savedGame.userBoard.forEach(square => {\r\n                if (square[0] !== undefined) {\r\n                    let j = 0;\r\n                    while (square[j] !== undefined) {\r\n                        /* console.log(\"This is square of index\", userIterator, \"will add class\", square[j], \"to it.\") */\r\n                        this.$refs.userGrid[userIterator].classList.add(square[j])\r\n                        /* console.log(\"It now becomes\", this.$refs.userGrid[userIterator].classList) */\r\n                        j++;\r\n                    }\r\n                }\r\n                userIterator++;\r\n            })\r\n            savedGame.computerBoard.forEach(square => {\r\n                if (square[0] !== undefined) {\r\n                    let j = 0;\r\n                    while (square[j] !== undefined) {\r\n                        this.$refs.computerGrid[computerIterator].classList.add(square[j])\r\n                        j++;\r\n                    }\r\n                }\r\n                computerIterator++;\r\n            })\r\n            while (document.querySelector('.grid-display').hasChildNodes()) {\r\n                document.querySelector('.grid-display').removeChild(document.querySelector('.grid-display').firstChild);\r\n            }\r\n            this.isGameStarted = true\r\n            this.playGame()\r\n        },\r\n        playGame() {\r\n            this.gameData.username = this.user\r\n            if (this.isGameOver) {\r\n                this.$refs.computerGrid.forEach(square => square.removeEventListener('click', this.revealSquare))\r\n                return\r\n            }\r\n            if (this.currentPlayer === 'user') {\r\n                this.$refs.computerGrid.forEach(square => square.addEventListener('click', this.revealSquare))\r\n            }\r\n            if (this.currentPlayer === 'computer') {\r\n                this.$refs.computerGrid.forEach(square => square.removeEventListener('click', this.revealSquare))\r\n                setTimeout(this.computerTurn, 1000);\r\n            }\r\n            this.$root.$emit('turnChange', this.currentPlayer)\r\n        },\r\n\r\n        revealSquare(square) {\r\n            /* uses a shorter named variable for convenience and readability\r\n             * basically reads the class list of the targeted HTML element\r\n             */\r\n            let targetClass = square.target.classList\r\n\r\n            /* check that targetted square does not already have classes \r\n             * boom/miss to avoid targetting repeated squares\r\n             */\r\n            if (!targetClass.contains('boom') && !targetClass.contains('miss')) {\r\n                this.gameData.moveCount += 1\r\n                /* if targetted squares contain ship, add class 'boom' to square \r\n                    * to denote a hit, else add class 'miss' to denote a miss\r\n                    */\r\n                if (targetClass.contains('taken'))  {\r\n                    this.updateScore(\"user\", targetClass)\r\n                    targetClass.add('boom')\r\n                    /* if score incremented by 1 == 17 (implying all ships are sunk)\r\n                     * end the game, else continue with player's turn\r\n                     */\r\n                    this.gameData.playerScore += 1\r\n                    if (this.gameData.playerScore === 17) {\r\n                        this.$root.$emit('gameWon', 'user')\r\n                        this.gameData.outcome = \"win\"\r\n                        this.endGame(this.gameData)\r\n                        localStorage.removeItem('gameState')\r\n                    }\r\n                } else {\r\n                    targetClass.add('miss')\r\n                }\r\n                this.currentPlayer = \"computer\"\r\n                this.playGame()\r\n            }\r\n        },\r\n\r\n        updateScore(who, targetClass) {\r\n            if (who == \"user\") {\r\n                if (targetClass.contains('destroyer')) {\r\n                    this.gameData.destroyerCount++\r\n                    let dataCopy = this.gameData.squaresContainingEnemyShips['destroyer']\r\n                    let orientation\r\n                    if (dataCopy[1] - dataCopy[0] == 1) orientation = \"horizontal\"\r\n                    else orientation = \"vertical\"\r\n                    if (this.gameData.destroyerCount == 2) {\r\n                        for (let i=0; i<2; i++) {\r\n                            this.$refs.computerGrid[this.gameData.squaresContainingEnemyShips['destroyer'][i]].classList.add('sunk')\r\n                            if (i==0 && orientation == \"horizontal\" ) this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-start')\r\n                            else if (i==1 && orientation == \"horizontal\") this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-end')\r\n                            else if (i==0 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-start')\r\n                            else if (i==1 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-end')\r\n                        }\r\n                    }\r\n                }\r\n                if (targetClass.contains('submarine')) {\r\n                    this.gameData.submarineCount++\r\n                    let dataCopy = this.gameData.squaresContainingEnemyShips['submarine']\r\n                    let orientation\r\n                    if (dataCopy[1] - dataCopy[0] == 1) orientation = \"horizontal\"\r\n                    else orientation = \"vertical\"\r\n                    if (this.gameData.submarineCount == 3) {\r\n                        for (let i=0; i<3; i++) {\r\n                            this.$refs.computerGrid[this.gameData.squaresContainingEnemyShips['submarine'][i]].classList.add('sunk')\r\n                            if (i==0 && orientation == \"horizontal\" ) this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-start')\r\n                            else if (i==2 && orientation == \"horizontal\") this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-end')\r\n                            else if (i==0 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-start')\r\n                            else if (i==2 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-end')\r\n                        }\r\n                    }\r\n                }\r\n                if (targetClass.contains('cruiser')) {\r\n                    this.gameData.cruiserCount++\r\n                    let dataCopy = this.gameData.squaresContainingEnemyShips['cruiser']\r\n                    let orientation\r\n                    if (dataCopy[1] - dataCopy[0] == 1) orientation = \"horizontal\"\r\n                    else orientation = \"vertical\"\r\n                    if (this.gameData.cruiserCount == 3) {\r\n                        for (let i=0; i<3; i++) {\r\n                            this.$refs.computerGrid[this.gameData.squaresContainingEnemyShips['cruiser'][i]].classList.add('sunk')\r\n                            if (i==0 && orientation == \"horizontal\" ) this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-start')\r\n                            else if (i==2 && orientation == \"horizontal\") this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-end')\r\n                            else if (i==0 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-start')\r\n                            else if (i==2 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-end')\r\n                        }\r\n                    }\r\n                }\r\n                if (targetClass.contains('battleship')) {\r\n                    this.gameData.battleshipCount++\r\n                    let dataCopy = this.gameData.squaresContainingEnemyShips['battleship']\r\n                    let orientation\r\n                    if (dataCopy[1] - dataCopy[0] == 1) orientation = \"horizontal\"\r\n                    else orientation = \"vertical\"\r\n                    if (this.gameData.battleshipCount == 4) {\r\n                        for (let i=0; i<4; i++) {\r\n                            this.$refs.computerGrid[this.gameData.squaresContainingEnemyShips['battleship'][i]].classList.add('sunk')\r\n                            if (i==0 && orientation == \"horizontal\" ) this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-start')\r\n                            else if (i==3 && orientation == \"horizontal\") this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-end')\r\n                            else if (i==0 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-start')\r\n                            else if (i==3 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-end')\r\n                        }\r\n                    }\r\n                }\r\n                if (targetClass.contains('carrier')) {\r\n                    this.gameData.carrierCount++\r\n                    let dataCopy = this.gameData.squaresContainingEnemyShips['carrier']\r\n                    let orientation\r\n                    if (dataCopy[1] - dataCopy[0] == 1) orientation = \"horizontal\"\r\n                    else orientation = \"vertical\"\r\n                    if (this.gameData.carrierCount == 5) {\r\n                        for (let i=0; i<5; i++) {\r\n                            this.$refs.computerGrid[this.gameData.squaresContainingEnemyShips['carrier'][i]].classList.add('sunk')\r\n                            if (i==0 && orientation == \"horizontal\" ) this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-start')\r\n                            else if (i==4 && orientation == \"horizontal\") this.$refs.computerGrid[dataCopy[i]].classList.add('horizontal-end')\r\n                            else if (i==0 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-start')\r\n                            else if (i==4 && orientation == \"vertical\") this.$refs.computerGrid[dataCopy[i]].classList.add('vertical-end')\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (targetClass.contains('destroyer')) {\r\n                    this.gameData.cpuDestroyerCount++\r\n                    if (this.gameData.cpuDestroyerCount == 2) {\r\n                        this.gameData.userShipsSunk.push(targetClass[1])\r\n                        for (let i=0; i<2; i++) {\r\n                            this.$refs.userGrid[this.gameData.squaresContainingShips['destroyer'][i]].classList.add('sunk')\r\n                        }\r\n                    }\r\n                }\r\n                if (targetClass.contains('submarine')) {\r\n                    this.gameData.cpuSubmarineCount++\r\n                    if (this.gameData.cpuSubmarineCount == 3) {\r\n                        this.gameData.userShipsSunk.push(targetClass[1])\r\n                        for (let i=0; i<3; i++) {\r\n                            this.$refs.userGrid[this.gameData.squaresContainingShips['submarine'][i]].classList.add('sunk')\r\n                        }\r\n                    }\r\n                }\r\n                if (targetClass.contains('cruiser')) {\r\n                    this.gameData.cpuCruiserCount++\r\n                    if (this.gameData.cpuCruiserCount == 3) {\r\n                        this.gameData.userShipsSunk.push(targetClass[1])\r\n                        for (let i=0; i<3; i++) {\r\n                            this.$refs.userGrid[this.gameData.squaresContainingShips['cruiser'][i]].classList.add('sunk')\r\n                        }\r\n                    }\r\n                }\r\n                if (targetClass.contains('battleship')) {\r\n                    this.gameData.cpuBattleshipCount++\r\n                    if (this.gameData.cpuBattleshipCount == 4) {\r\n                        this.gameData.userShipsSunk.push(targetClass[1])\r\n                        for (let i=0; i<4; i++) {\r\n                            this.$refs.userGrid[this.gameData.squaresContainingShips['battleship'][i]].classList.add('sunk')\r\n                        }\r\n                    }\r\n                }\r\n                if (targetClass.contains('carrier')) {\r\n                    this.gameData.cpuCarrierCount++\r\n                    if (this.gameData.cpuCarrierCount == 5) {\r\n                        this.gameData.userShipsSunk.push(targetClass[1])\r\n                        for (let i=0; i<5; i++) {\r\n                            this.$refs.userGrid[this.gameData.squaresContainingShips['carrier'][i]].classList.add('sunk')\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        },\r\n        computeAdjacentSquares(index) {\r\n            /* if first column\r\n                    * if first row, return right & bottom \r\n                    * if last row, return right & top\r\n                    * else, return top, right, bottom\r\n                * else if last column\r\n                    * if first row, return left & bottom\r\n                    * if last row, return left & top \r\n                    * else return top, left, bottom \r\n                * else\r\n                    * if first row, return left right bottom\r\n                    * if last row, return left right top\r\n                    * \r\n                    * else return left right bottom top\r\n            */\r\n            if (String(index).slice(-1) == '0') {\r\n                if (index == 0) {\r\n                    return [1, 10]\r\n                } else if (index == 90) {\r\n                    return [80, 91]\r\n                } else {\r\n                    return [index-10, index+1, index+10]\r\n                }\r\n            } else if (String(index).slice(-1) == '9') {\r\n                if (index == 9) {\r\n                    return [8, 19]\r\n                } else if (index == 99) {\r\n                    return [98, 89]\r\n                } else {\r\n                    return [index-10, index-1, index+10]\r\n                }\r\n            } else {\r\n                if (index < 10) {\r\n                    return [index-1, index+1, index+10]\r\n                } else if (index > 89) {\r\n                    return [index-1, index+1, index-10]\r\n                } else {\r\n                    return [index-1, index+1, index-10, index+10]\r\n                }\r\n            }\r\n        },\r\n        wrongDeducedOrientation(squaresHit, deducedOrientation) {\r\n            if (deducedOrientation == \"horizontal\") {\r\n                return [Math.min(...squaresHit)-10, Math.min(...squaresHit)+10,Math.max(...squaresHit)-10, Math.max(...squaresHit)+10]\r\n            } else {\r\n                return [Math.min(...squaresHit)-1, Math.min(...squaresHit)+1,Math.max(...squaresHit)-1, Math.max(...squaresHit)+1]\r\n            }\r\n        },\r\n        hunt() {\r\n            // make code more readable by passing IndexesHit to a shorter named variable\r\n            var squaresHit = this.computerMemory.previousIndexesHit\r\n            var possibleSquares\r\n\r\n            if (squaresHit.length == 1) {\r\n                possibleSquares = this.computeAdjacentSquares(squaresHit[0])              \r\n            } else if (squaresHit.length == 2) {\r\n                if (squaresHit[1] == squaresHit[0]-1 || squaresHit[1] == squaresHit[0]+1) {\r\n                    this.computerMemory.deducedOrientation = \"horizontal\"\r\n                    possibleSquares = [Math.min(...squaresHit)-1, Math.max(...squaresHit)+1]\r\n                } else {\r\n                    this.computerMemory.deducedOrientation = \"vertical\"\r\n                    possibleSquares = [Math.min(...squaresHit)-10, Math.max(...squaresHit)+10]\r\n                }\r\n            } else if (squaresHit.length == 3) {\r\n                if (this.computerMemory.deducedOrientation == \"horizontal\") {\r\n                    possibleSquares = [Math.min(...squaresHit)-1, Math.max(...squaresHit)+1]\r\n                } else {\r\n                    possibleSquares = [Math.min(...squaresHit)-10, Math.max(...squaresHit)+10]\r\n                }\r\n            } else {\r\n                if (this.computerMemory.deducedOrientation == \"horizontal\") {\r\n                    possibleSquares = [Math.min(...squaresHit)-1, Math.max(...squaresHit)+1]\r\n                } else {\r\n                    possibleSquares = [Math.min(...squaresHit)-10, Math.max(...squaresHit)+10]\r\n                }\r\n            } \r\n            possibleSquares = possibleSquares.filter(index => index <=99 && index >=0)\r\n            var result = possibleSquares.every(index => \r\n                this.$refs.userGrid[index].classList.contains('miss') || this.$refs.userGrid[index].classList.contains('boom')\r\n                )\r\n            if (result) {\r\n                possibleSquares = this.wrongDeducedOrientation(squaresHit, this.computerMemory.deducedOrientation)\r\n            }\r\n            // return random square from possible squares to be targeted\r\n            return possibleSquares[Math.floor(Math.random() * possibleSquares.length)]\r\n        },\r\n        computerTurn() {\r\n\r\n            var target \r\n            // If previous turn was a hit or if it's a miss but ship has not been sunk\r\n            if (this.computerMemory.previousIndexesHit.length != 0) {\r\n                target = this.hunt()\r\n            } else {\r\n                // do-while loop to e\r\n                target = this.checkerboardIndex[Math.floor(Math.random()*this.checkerboardIndex.length)]\r\n            }\r\n\r\n            // make code more readable by passing IndexesHit to a shorter named variable\r\n            let targetClass = this.$refs.userGrid[target].classList\r\n\r\n            /* check that targetted square does not already have classes \r\n             * 'boom'/'miss' to avoid targetting repeated squares\r\n             */\r\n            if (!targetClass.contains('boom') && !targetClass.contains('miss')) {\r\n                /* if targetted squares contain ship, add class 'boom' to square \r\n                 * to denote a hit, else add class 'miss' to denote a miss\r\n                 */\r\n                if (targetClass.contains('taken'))  {\r\n                    this.computerMemory.previousTurnHit = true\r\n                    if (!this.computerMemory.previousShipHit.includes(targetClass)) {\r\n                        this.computerMemory.previousShipHit.push(targetClass[1]) \r\n                    }\r\n                    this.computerMemory.previousIndexesHit.push(target)\r\n\r\n                    // If the array of indexes hit contains all squares of ship, ship is sunk, and reset memory\r\n                    var placeholder = this.gameData.squaresContainingShips[targetClass[1]]\r\n                    let result = this.computerMemory.previousIndexesHit.length >= placeholder.length &&\r\n                        placeholder.every(element => this.computerMemory.previousIndexesHit.includes(element))\r\n                    if (result) {\r\n                        this.computerMemory.previousShipSunk = true\r\n                        var index = this.computerMemory.previousShipHit.indexOf(targetClass[1]);\r\n                        this.computerMemory.previousShipHit.splice(index, 1);\r\n                        this.gameData.squaresContainingShips[targetClass[1]].forEach(index => {\r\n                            console.log(this.computerMemory.previousIndexesHit)\r\n                            this.computerMemory.previousIndexesHit = this.computerMemory.previousIndexesHit.filter(e => e !== index)\r\n                            console.log(this.computerMemory.previousIndexesHit)\r\n                        })\r\n                        if (this.computerMemory.previousIndexHit == 0) {\r\n                            this.computerMemory.previousTurnHit = false\r\n                        }\r\n                    } else {\r\n                        this.computerMemory.previousShipSunk = false\r\n                    }\r\n                    this.updateScore(\"cpu\", targetClass)\r\n                    targetClass.add('boom')\r\n                    /* if score incremented by 1 == 17 (implying all ships are sunk)\r\n                     * end the game, else continue with player's turn\r\n                     */\r\n                    this.gameData.cpuScore += 1\r\n                    if (this.gameData.cpuScore === 17) {\r\n                        this.$root.$emit('gameWon', 'computer')\r\n                        this.gameData.outcome = \"lose\"\r\n                        this.endGame(this.gameData)\r\n                        localStorage.removeItem('gameState')\r\n                    }\r\n                } else {\r\n                    targetClass.add('miss')\r\n                    if (this.computerMemory.previousShipSunk == \"true\") {\r\n                        this.computerMemory.previousTurnHit = false\r\n                    }                     \r\n                }\r\n                this.updateAndSave()\r\n                this.currentPlayer = 'user'\r\n                this.playGame()\r\n            } else this.computerTurn() // if targetted square has been targetted before, call function again\r\n            \r\n        },\r\n        \r\n    },\r\n    /* mounted()\r\n     * called after DOM has been mounted/rendered\r\n     * can do DOM manipulation\r\n     */\r\n    mounted(){\r\n        \r\n        this.$refs.userGrid.forEach(square => square.addEventListener('dragstart', this.dragStart))\r\n        this.$refs.userGrid.forEach(square => square.addEventListener('dragover', this.dragOver))\r\n        this.$refs.userGrid.forEach(square => square.addEventListener('drop', this.drop))\r\n        this.$refs.userGrid.forEach(square => square.addEventListener('dragend', this.dragEnd))\r\n        this.$root.$on('game-started', () => {\r\n            // Call the generate method to place ships on the computer's board\r\n            for (let i=0; i<this.shipArray.length; i++) {\r\n                this.generate(this.shipArray[i])\r\n            }\r\n            this.$refs.userGrid.forEach(square => square.removeEventListener('dragover', this.dragOver))\r\n            this.$refs.userGrid.forEach(square => square.removeEventListener('dragstart', this.dragStart))\r\n            this.$refs.userGrid.forEach(square => square.removeEventListener('drop', this.drop))\r\n            this.$refs.userGrid.forEach(square => square.removeEventListener('dragend', this.dragEnd))\r\n            this.isGameStarted = true\r\n            this.playGame()\r\n        })\r\n        this.$root.$on('game-loaded', () => {\r\n            this.$refs.userGrid.forEach(square => square.removeEventListener('dragover', this.dragOver))\r\n            this.$refs.userGrid.forEach(square => square.removeEventListener('dragstart', this.dragStart))\r\n            this.$refs.userGrid.forEach(square => square.removeEventListener('drop', this.drop))\r\n            this.$refs.userGrid.forEach(square => square.removeEventListener('dragend', this.dragEnd))\r\n            this.loadGame()\r\n        })\r\n    },\r\n    /* created()\r\n     * have access to reactive data properties and can change them\r\n     * DOM has not been mounted so cannot do DOM manipulation\r\n     * generally used for fetching data from backend\r\n     */\r\n    created() {\r\n        this.width = 10,\r\n        this.shipArray = [\r\n            { \r\n                name: 'destroyer', \r\n                length: 2,\r\n                orientation: [\r\n                    [0, 1],\r\n                    [0, this.width]\r\n                ]   \r\n            },\r\n            { \r\n                name: 'submarine', \r\n                length: 3,\r\n                orientation: [\r\n                    [0, 1, 2],\r\n                    [0, this.width, this.width*2]\r\n                ]   \r\n            },\r\n            { \r\n                name: 'cruiser', \r\n                length: 3,\r\n                orientation: [\r\n                    [0, 1, 2],\r\n                    [0, this.width, this.width*2]\r\n                ]   \r\n            },\r\n            { \r\n                name: 'battleship', \r\n                length: 4,\r\n                orientation: [\r\n                    [0, 1, 2, 3],\r\n                    [0, this.width, this.width*2, this.width*3]\r\n                ]   \r\n            },\r\n            { \r\n                name: 'carrier', \r\n                length: 5,\r\n                orientation: [\r\n                    [0, 1, 2, 3, 4],\r\n                    [0, this.width, this.width*2, this.width*3, this.width*4]\r\n                ]   \r\n            },\r\n        ],\r\n        // later to be set to all DOM elements with the class 'ship'\r\n        this.ships = undefined,\r\n        this.$eventHub.$on('dragged', (info) => {\r\n            this.selectedShipClass = info.target.id.slice(0,-2)\r\n            this.selectedShipIndex = info.target.id.slice(-1)\r\n            this.draggedShip = info.target.parentNode\r\n            if (this.draggedShip.classList.contains(this.selectedShipClass+'-vertical')) {\r\n                if (this.selectedShipClass == 'destroyer') {\r\n                    this.destroyerOrientation = \"vertical\"\r\n                }\r\n                if (this.selectedShipClass == 'submarine') {\r\n                    this.submarineOrientation = \"vertical\"\r\n                }\r\n                if (this.selectedShipClass == 'cruiser') {\r\n                    this.cruiserOrientation = \"vertical\"\r\n                }\r\n                if (this.selectedShipClass == 'battleship') {\r\n                    this.battleshipOrientation = \"vertical\"\r\n                }\r\n                if (this.selectedShipClass == 'carrier') {\r\n                    this.carrierOrientation = \"vertical\"\r\n                }\r\n            } else {\r\n                if (this.selectedShipClass == 'destroyer') {\r\n                    this.destroyerOrientation = \"horizontal\"\r\n                }\r\n                if (this.selectedShipClass == 'submarine') {\r\n                    this.submarineOrientation = \"horizontal\"\r\n                }\r\n                if (this.selectedShipClass == 'cruiser') {\r\n                    this.cruiserOrientation = \"horizontal\"\r\n                }\r\n                if (this.selectedShipClass == 'battleship') {\r\n                    this.battleshipOrientation = \"horizontal\"\r\n                }\r\n                if (this.selectedShipClass == 'carrier') {\r\n                    this.carrierOrientation = \"horizontal\"\r\n                }\r\n            }\r\n        });\r\n    }, \r\n    beforeDestroy() {\r\n        this.$eventHub.$off('dragged');\r\n    },\r\n    data() {\r\n        return {\r\n            computerMemory: {\r\n                previousTurnHit: false,\r\n                previousShipSunk: true,\r\n                previousShipHit: [],\r\n                deducedOrientation: \"\",\r\n                previousIndexesHit: [],\r\n                possibleSquares: [],\r\n            },\r\n            checkerboardIndex: [0,2,4,6,8,\r\n                                11,13,15,17,19,\r\n                                20,22,24,26,28,\r\n                                31,33,35,37,39,\r\n                                40,42,44,46,48,\r\n                                51,53,55,57,59,\r\n                                60,62,64,66,68,\r\n                                71,73,75,77,79,\r\n                                80,82,84,86,88,\r\n                                91,93,95,97,99],\r\n            length: 0,\r\n            gameData: {\r\n                username: \"\",\r\n                outcome: \"\", \r\n                moveCount: 0,\r\n                userBoard: [],\r\n                computerBoard: [],\r\n                squaresContainingShips: {destroyer: [], submarine: [], cruiser: [], battleship: [], carrier: []},\r\n                squaresContainingEnemyShips: {destroyer: [], submarine: [], cruiser: [], battleship: [], carrier: []},\r\n                userShipsSunk: [],\r\n                computerShipsSunk: [],\r\n                destroyerCount: 0,\r\n                submarineCount: 0,\r\n                cruiserCount: 0,\r\n                battleshipCount: 0,\r\n                carrierCount: 0,\r\n                cpuDestroyerCount: 0,\r\n                cpuSubmarineCount: 0,\r\n                cpuCruiserCount: 0,\r\n                cpuBattleshipCount: 0,\r\n                cpuCarrierCount: 0,\r\n                playerScore: 0,\r\n                cpuScore: 0,\r\n            },\r\n            destroyerOrientation: \"horizontal\",\r\n            submarineOrientation: \"horizontal\",\r\n            cruiserOrientation: \"horizontal\",\r\n            battleshipOrientation: \"horizontal\",\r\n            carrierOrientation: \"horizontal\",\r\n            draggedShip: undefined,\r\n            selectedShipIndex: undefined,\r\n            selectedShipClass: undefined,\r\n            currentPlayer: \"user\",\r\n            \r\n            shipPlaced: 0,\r\n            isGameStarted: false,\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters(['isGameOver', 'user'])\r\n    }\r\n    /* run once per page load, and will re-run if any dependent variable changes\r\n     * think of computed value as a *derived* value that\r\n     * will be automatically updated whenever one of the underlying values used\r\n     * to calculate it is updated.\r\n     * You don't call a computed, and it doesn't accept parameters\r\n     */\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n.container {\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n}\r\n\r\n.grid {\r\n    margin:2vmin;\r\n    display: grid;\r\n    background-color: rgba(0, 157, 196, 0.7);\r\n    grid-template-rows: repeat(10, 4.6vmin);\r\n    grid-template-columns: repeat(10, 4.6vmin);\r\n}\r\n\r\n.grid div {\r\n    border: 1px solid rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.grid-computer > .taken {\r\n    background-color: rgba(0, 157, 196, 0);\r\n}\r\n\r\n.destroyer-container div {\r\n    width: 50%;\r\n    height: 100%;\r\n}\r\n\r\n.ship {\r\n    display: flex;\r\n    margin: 10px;\r\n    height: 10%;\r\n}\r\n\r\n.taken, .ship {\r\n    background-color: rgb(180, 180, 180);\r\n}\r\n\r\n.taken {\r\n    grid-area: span 1/span 1;\r\n}\r\n\r\n.taken.horizontal-start {\r\n    border-top-left-radius: 50%;\r\n    border-bottom-left-radius: 50%;\r\n}\r\n\r\n.taken.horizontal-end {\r\n    border-top-right-radius: 50%;\r\n    border-bottom-right-radius: 50%;\r\n}\r\n\r\n.taken.vertical-start {\r\n    border-top-left-radius: 50%;\r\n    border-top-right-radius: 50%;\r\n}\r\n\r\n.taken.vertical-end {\r\n    border-bottom-left-radius: 50%;\r\n    border-bottom-right-radius: 50%;\r\n}\r\n\r\n\r\n\r\n.boom,\r\n.miss {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.boom::before {\r\n    content: '💣';\r\n    position: absolute;\r\n    animation: bomb 1.5s ease-in forwards;\r\n}\r\n\r\n.boom::after {\r\n    content: '🔥';\r\n    animation: hit 0.4s linear infinite;\r\n}\r\n\r\n.miss::before {\r\n    content: '💣';\r\n    position: absolute;\r\n    animation: bomb 1.5s ease-in forwards;\r\n}\r\n\r\n.miss::after {\r\n    /* content: '';\r\n    animation: ripple 3s ease-out infinite;\r\n    border: .1vmin solid rgba(1, 140, 175, 1);\r\n    border-radius: 100%;\r\n    width: 1vmin;\r\n    height: 1vmin; */\r\n    content: '✖️';\r\n}\r\n\r\n@keyframes hit {\r\n    0% {\r\n        transform: scale(1.4);\r\n    }\r\n    100% {\r\n        transform: scale(1.5);\r\n    }\r\n}\r\n\r\n@keyframes bomb {\r\n    0% {\r\n        opacity: 1;\r\n        transform: scale(1.5);\r\n    }\r\n    100% {\r\n        opacity: 0;\r\n        transform: scale(0);\r\n    }\r\n}\r\n\r\n@keyframes ripple {\r\n    0% {\r\n        opacity: 0.7;\r\n        transform: scale(2);\r\n    }\r\n    100% {\r\n        opacity: 0.3;\r\n        transform: scale(3);\r\n    }\r\n}\r\n\r\n\r\n/* .boom::after,\r\n.miss::after {\r\n    content: '';\r\n    position: absolute;\r\n    border-radius: 100%;\r\n    width: 1vmin;\r\n    height: 1vmin;\r\n}\r\n\r\n.boom::after {\r\n    background-color: red;\r\n} \r\n.miss::after {\r\n    background-color: black;\r\n}  */\r\n\r\n.grid-computer > .taken.sunk,\r\n.grid-user > .taken.sunk {\r\n   background-color: rgba(114, 114, 114, 0.692);\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Board.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Board.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Board.vue?vue&type=template&id=6b79385d&scoped=true&\"\nimport script from \"./Board.vue?vue&type=script&lang=js&\"\nexport * from \"./Board.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Board.vue?vue&type=style&index=0&id=6b79385d&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6b79385d\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <div>\r\n        <Header/>\r\n        <h1>Single Player Mode</h1>\r\n        <Board/>\r\n        <Sideboard />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Header from '@/components/Header'\r\nimport Sideboard from '@/components/Sideboard'\r\nimport Board from '@/components/Board'\r\n\r\nexport default {\r\n    components: {\r\n        Header,\r\n        Board,\r\n        Sideboard,\r\n    }, \r\n}\r\n</script>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Play.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Play.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Play.vue?vue&type=template&id=5fe88bab&\"\nimport script from \"./Play.vue?vue&type=script&lang=js&\"\nexport * from \"./Play.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Sideboard.vue?vue&type=style&index=0&id=21011b0f&scoped=true&lang=css&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Board.vue?vue&type=style&index=0&id=6b79385d&scoped=true&lang=css&\""],"sourceRoot":""}